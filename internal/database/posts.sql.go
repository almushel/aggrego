// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES ($1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, $2, $3, $4, $5, $6)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	Title       string
	Url         string
	Description string
	PublishedAt sql.NullTime
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getLikedPostsByUser = `-- name: GetLikedPostsByUser :many
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id 
FROM posts
WHERE id IN (
	SELECT post_id
	FROM post_likes
	WHERE user_id=$1
)
`

func (q *Queries) GetLikedPostsByUser(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getLikedPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostCount = `-- name: GetPostCount :one
SELECT COUNT(*)
FROM posts
WHERE feed_id IN (
	SELECT feed_id 
	FROM feed_follows
	WHERE user_id=$1
)
`

func (q *Queries) GetPostCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getPostLike = `-- name: GetPostLike :one
SELECT id, user_id, post_id, created_at, updated_at
FROM post_likes
WHERE id=$1
`

func (q *Queries) GetPostLike(ctx context.Context, id uuid.UUID) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, getPostLike, id)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT id, created_at, updated_at, title, url, description, published_at, feed_id
FROM posts
WHERE feed_id IN (
	SELECT feed_id 
	FROM feed_follows
	WHERE user_id=$1
)
OFFSET $2
LIMIT $3
`

type GetPostsByUserParams struct {
	UserID uuid.UUID
	Offset int32
	Limit  int32
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserLikes = `-- name: GetUserLikes :many
SELECT id, user_id, post_id, created_at, updated_at
FROM post_likes
WHERE user_id=$1
`

func (q *Queries) GetUserLikes(ctx context.Context, userID uuid.UUID) ([]PostLike, error) {
	rows, err := q.db.QueryContext(ctx, getUserLikes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PostLike
	for rows.Next() {
		var i PostLike
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PostID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const likePost = `-- name: LikePost :one
INSERT INTO post_likes (id, user_id, post_id, created_at, updated_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
RETURNING id, user_id, post_id, created_at, updated_at
`

type LikePostParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	PostID uuid.UUID
}

func (q *Queries) LikePost(ctx context.Context, arg LikePostParams) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, likePost, arg.ID, arg.UserID, arg.PostID)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unlikePost = `-- name: UnlikePost :one
DELETE FROM post_likes
WHERE id=$1
RETURNING id, user_id, post_id, created_at, updated_at
`

func (q *Queries) UnlikePost(ctx context.Context, id uuid.UUID) (PostLike, error) {
	row := q.db.QueryRowContext(ctx, unlikePost, id)
	var i PostLike
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
